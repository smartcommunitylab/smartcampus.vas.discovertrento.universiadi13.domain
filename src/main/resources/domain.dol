/*******************************************************************************
 * Copyright 2012-2013 Trento RISE
 * 
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0
 * 
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 ******************************************************************************/
package eu.trentorise.smartcampus.domain.universiadi13;

import it.sayservice.platform.compiler.domain.model.annotations.ServiceNotification;
import it.sayservice.platform.compiler.domain.model.annotations.Subscription;

import eu.trentorise.smartcampus.domain.discovertrento.EventService;
import eu.trentorise.smartcampus.domain.discovertrento.POIService;
import eu.trentorise.smartcampus.domain.discovertrento.GenericEvent;
import eu.trentorise.smartcampus.domain.discovertrento.GenericPOI;

DomainObject UniversiadiEventsService implements EventService {
    
    @ServiceNotification(serviceId="it.sayservice.ext.universiadi2013", methodName="GetEvents", converter="eu.trentorise.smartcampus.domain.universiadi13.converter.EventsDataConverter")
    port update(data : GenericEvent[]);

    @Subscription(serviceId="it.sayservice.ext.universiadi2013", methodName="GetEvents")
    operation subscribeEvents();       
    
    action initialize() {
        invoke subscribeEvents();
    }
}
DomainObject UniversiadiScheduleService implements EventService {
    
    @ServiceNotification(serviceId="it.sayservice.ext.universiadi2013", methodName="GetCompetitionSchedule", converter="eu.trentorise.smartcampus.domain.universiadi13.converter.EventsDataConverter")
    port update(data : GenericEvent[]);

    @Subscription(serviceId="it.sayservice.ext.universiadi2013", methodName="GetCompetitionSchedule")
    operation subscribeSchedule();       
    
    action initialize() {
        invoke subscribeSchedule();
    }
}

DomainObject UniversiadiVenuesService implements POIService {

    @ServiceNotification(serviceId="it.sayservice.ext.universiadi2013", methodName="GetVenues", converter="eu.trentorise.smartcampus.domain.universiadi13.converter.VenuesDataConverter")
    port update(data : GenericPOI[]);

    @Subscription(serviceId="it.sayservice.ext.universiadi2013", methodName="GetVenues")
    operation subscribeVenues();       
    
    action initialize() {
        invoke subscribeVenues();
    }

}
